name: Validate Primer
on: 
  push:
    branches: ["main", "release*"]
    tags: ["*"]
  pull_request:
    branches: ["main", "release*"]

env:
  GO_VERSION: "1.17"
  KIND_VERSION: "0.9.0"
  GO111MODULE: "on"
  OPERATOR_IMAGE: "quay.io/konveyor/gitops-primer"
  BUNDLE_IMAGE: "quay.io/konveyor/gitops-primer-bundle"
  EXPORT_IMAGE: "quay.io/konveyor/gitops-primer-export"
  DOWNLOADER_IMAGE: "quay.io/konveyor/gitops-primer-downloader"
  WEBHOOK_IMAGE: "quay.io/konveyor/gitops-primer-webhook"
  TAG: v0.0.8


jobs:
  build-crane:
    name: Build-crane
    runs-on: ubuntu-18.04
    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build crane
        run: |
          git clone https://github.com/konveyor/crane.git
          cd crane
          go build .

      - name: Save artifacts
        uses: actions/upload-artifact@v1
        with:
          name: crane
          path: crane/crane

  build-plugins:
    name: Build-plugins
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create binaries
        run: make build-plugins

      - name: Save artifacts
        uses: actions/upload-artifact@v1
        with:
          name: plugins
          path: /home/runner/go/bin/

  build-operator:
    name: Build-operator
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test
        run: make test

      - name: Build operator container
        run: make docker-build IMG=${OPERATOR_IMAGE}

      - name: Export container image
        run: docker save -o /tmp/operator.tar ${OPERATOR_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-operator
          path: /tmp/operator.tar

  build-bundle:
    name: Build-Bundle
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Install operator-sdk
        run: |
          curl -L -o operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/v1.11.0/operator-sdk_linux_amd64
          sudo install ./operator-sdk /usr/local/bin && rm operator-sdk

      - name: Make bundle
        run: make bundle

      - name: Build bundle
        run: make bundle-build

      - name: Export container image
        run: docker save -o /tmp/bundle.tar ${BUNDLE_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-bundle
          path: /tmp/bundle.tar

  build-export:
    name: Build-export
    needs: [build-crane, build-plugins, build-webhook, build-operator, build-bundle, build-downloader]
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: create transform-plugin dir
        run: mkdir export/transform-plugins

      - name: Load binary artifact
        uses: actions/download-artifact@v1
        with:
          name: plugins
          path: export/transform-plugins/

      - name: Load crane artifact
        uses: actions/download-artifact@v1
        with:
          name: crane
          path: export/

      - name: Build export container
        run: make -C export image

      - name: Export container image
        run: docker save -o /tmp/export.tar ${EXPORT_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: export-image
          path: /tmp/export.tar

  build-downloader:
    name: Build-downloader
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Build downloader image
        run: make -C downloader image

      - name: Export container image
        run: docker save -o /tmp/downloader.tar ${DOWNLOADER_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-downloader
          path: /tmp/downloader.tar
  build-webhook:
    name: Build-Webhook
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Build webhook image
        run: make -C webhook image

      - name: Export container image
        run: docker save -o /tmp/webhook.tar ${WEBHOOK_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-webhook
          path: /tmp/webhook.tar

  push-operator:
    name: Push operator container to registry
    needs: build-export
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: primer-operator
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/operator.tar
          docker inspect ${OPERATOR_IMAGE}
      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${OPERATOR_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
      - name: Push to registry (latest)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker push "${OPERATOR_IMAGE}"
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker tag "${OPERATOR_IMAGE}" "${OPERATOR_IMAGE}:${{ env.TAG }}"
          docker push "${OPERATOR_IMAGE}:${{ env.TAG }}"

  push-export:
    name: Push export container to registry
    needs: build-export
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: export-image
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/export.tar
          docker inspect ${EXPORT_IMAGE}
      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${EXPORT_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
      - name: Push to registry (latest)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker push "${EXPORT_IMAGE}"
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker tag "${EXPORT_IMAGE}" "${EXPORT_IMAGE}:${{ env.TAG }}"
          docker push "${EXPORT_IMAGE}:${{ env.TAG }}"

  push-bundle:
    name: Push bundle container to registry
    needs: build-export
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: primer-bundle
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/bundle.tar
          docker inspect "${BUNDLE_IMAGE}:${{ env.TAG }}"
          
      - name: Login to registry
        # If the registry server is specified in the image name, we use that.
        # If the server isn't in the image name, default to docker.io
        run: |
          [[ "${BUNDLE_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
          
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          echo "Pushing to ${{ env.TAG }}"
          docker push "${BUNDLE_IMAGE}:${{ env.TAG }}"

  push-downloader:
    name: Push downloader image to registry
    needs: build-export
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: primer-downloader
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/downloader.tar
          docker inspect ${DOWNLOADER_IMAGE}
          
          [[ "${DOWNLOADER_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
      - name: Push to registry (latest)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker push "${DOWNLOADER_IMAGE}"
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker tag "${DOWNLOADER_IMAGE}" "${DOWNLOADER_IMAGE}:${{ env.TAG }}"
          docker push "${DOWNLOADER_IMAGE}:${{ env.TAG }}"

  push-webhook:
    name: Push webhook image to registry
    needs: build-export
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Load container artifact
        uses: actions/download-artifact@v1
        with:
          name: primer-webhook
          path: /tmp

      - name: Import container image
        run: |
          docker load -i /tmp/webhook.tar
          docker inspect ${WEBHOOK_IMAGE}

          [[ "${WEBHOOK_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="docker.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
      - name: Push to registry (latest)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker push "${WEBHOOK_IMAGE}"
      - name: Push to registry (version tag)
        if: >
          (github.event_name == 'push' || github.event_name == 'schedule') &&
          github.ref == 'refs/heads/main'
        run: |
          docker tag "${WEBHOOK_IMAGE}" "${WEBHOOK_IMAGE}:${{ env.TAG }}"
          docker push "${WEBHOOK_IMAGE}:${{ env.TAG }}"
