name: Validate Primer
on: 
  push:
    branches: ["main", "release*"]
    tags: ["*"]
  pull_request:
    branches: ["main", "release*"]

env:
  GO_VERSION: "1.17"
  KIND_VERSION: "0.9.0"
  GO111MODULE: "on"
  OPERATOR_IMAGE: "quay.io/konveyor/gitops-primer"
  BUNDLE_IMAGE: "quay.io/konveyor/gitops-primer-bundle"
  EXPORT_IMAGE: "quay.io/konveyor/gitops-primer-export"
  DOWNLOADER_IMAGE: "quay.io/konveyor/gitops-primer-downloader"
  WEBHOOK_IMAGE: "quay.io/konveyor/gitops-primer-webhook"
  TAG: v0.0.10


jobs:
  build-operator:
    name: Build-operator
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Test
        run: make test

      - name: Build operator container
        run: make docker-build IMG=${OPERATOR_IMAGE}

      - name: Export container image
        run: docker save -o /tmp/operator.tar ${OPERATOR_IMAGE}

      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.REGISTRY_USERNAME}}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push operator image to quay
        run: docker push ${OPERATOR_IMAGE}:latest

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-operator
          path: /tmp/operator.tar

  build-bundle:
    name: Build-Bundle
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Install operator-sdk
        run: |
          curl -L -o operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/v1.11.0/operator-sdk_linux_amd64
          sudo install ./operator-sdk /usr/local/bin && rm operator-sdk

      - name: Make bundle
        run: make bundle

      - name: Build bundle
        run: make bundle-build

      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.REGISTRY_USERNAME}}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push bundle image to quay
        run: |
          docker tag ${BUNDLE_IMAGE}:${TAG} ${BUNDLE_IMAGE}:latest
          docker push ${BUNDLE_IMAGE}:latest

      - name: Export container image
        run: docker save -o /tmp/bundle.tar ${BUNDLE_IMAGE}

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-bundle
          path: /tmp/bundle.tar

  build-export:
    name: Build-export
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        
      - name: Build export container
        run: make -C export image

      - name: Export container image
        run: docker save -o /tmp/export.tar ${EXPORT_IMAGE}

      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.REGISTRY_USERNAME}}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push export image to quay
        run: docker push ${EXPORT_IMAGE}:latest

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: export-image
          path: /tmp/export.tar

  build-downloader:
    name: Build-downloader
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Build downloader image
        run: make -C downloader image

      - name: Export container image
        run: docker save -o /tmp/downloader.tar ${DOWNLOADER_IMAGE}

      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.REGISTRY_USERNAME}}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push downloader image to quay
        run: docker push ${DOWNLOADER_IMAGE}:latest

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-downloader
          path: /tmp/downloader.tar

  build-webhook:
    name: Build-Webhook
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Build webhook image
        run: make -C webhook image

      - name: Export container image
        run: docker save -o /tmp/webhook.tar ${WEBHOOK_IMAGE}

      - name: Login to Quay
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.REGISTRY_USERNAME}}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push webhook image to quay
        run: docker push ${WEBHOOK_IMAGE}:latest

      - name: Save container as artifact
        uses: actions/upload-artifact@v1
        with:
          name: primer-webhook
          path: /tmp/webhook.tar

  push-operator:
    name: Push operator container to registry
    needs: build-export
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug

      - name: Login to the registry
        run: |
          [[ "${OPERATOR_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="quay.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
   
      - name: "Build Operator Image"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: "./Dockerfile"
          platforms: "linux/amd64,linux/arm64"
          push: true
          tags: ${{ env.OPERATOR_IMAGE }}


  push-export:
    name: Push export container to registry
    needs: [build-webhook, build-operator, build-bundle, build-downloader, build-export]
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug

      - name: Login to the registry
        run: |
          [[ "${EXPORT_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="quay.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
   
      - name: "Build Operator Image"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: "./export/Dockerfile"
          platforms: "linux/amd64,linux/arm64"
          push: true
          tags: ${{ env.EXPORT_IMAGE }}

  push-bundle:
    name: Push bundle container to registry
    needs: [build-webhook, build-operator, build-bundle, build-downloader, build-export]
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug

      - name: Login to the registry
        run: |
          [[ "${BUNDLE_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="quay.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
   
      - name: "Build Operator Image"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: "./bundle.Dockerfile"
          platforms: "linux/amd64,linux/arm64"
          push: true
          tags: ${{ env.BUNDLE_IMAGE }}

  push-downloader:
    name: Push downloader image to registry
    needs: [build-webhook, build-operator, build-bundle, build-downloader, build-export]
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug

      - name: Login to the registry
        run: |
          [[ "${DOWNLOADER_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="quay.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
   
      - name: "Build Operator Image"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: "./downloader/Dockerfile"
          platforms: "linux/amd64,linux/arm64"
          push: true
          tags: ${{ env.DOWNLOADER_IMAGE }}

  push-webhook:
    name: Push webhook image to registry
    needs: [build-webhook, build-operator, build-bundle, build-downloader, build-export]
    if: >
      (github.event_name == 'push' || github.event_name == 'schedule') &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug

      - name: Login to the registry
        run: |
          [[ "${WEBHOOK_IMAGE}" =~ ^([^/]+)/[^/]+/[^/]+ ]] && REGISTRY="${BASH_REMATCH[1]}" || REGISTRY="quay.io"
          echo "Attempting docker login to: ${REGISTRY}"
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin ${REGISTRY}
   
      - name: "Build Operator Image"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: "./webhook/Dockerfile"
          platforms: "linux/amd64,linux/arm64"
          push: true
          tags: ${{ env.WEBHOOK_IMAGE }}